1) FCFS Scheduling


#include <stdio.h>
int main()
{
    int pid[15];
    int bt[15];
    int n;
    printf("Enter the number of processes: ");
    scanf("%d",&n);
 
    printf("Enter process id of all the processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&pid[i]);
    }
 
    printf("Enter burst time of all the processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&bt[i]);
    }
 
    int i, wt[n];
    wt[0]=0;
 
    for(i=1; i<n; i++)
    {
        wt[i]= bt[i-1]+ wt[i-1];
    }
 
    printf("Process ID     Burst Time     Waiting Time     TurnAround Time\n");
    float twt=0.0;
    float tat= 0.0;
    for(i=0; i<n; i++)
    {
        printf("%d\t\t", pid[i]);
        printf("%d\t\t", bt[i]);
        printf("%d\t\t", wt[i]);
 
        printf("%d\t\t", bt[i]+wt[i]);
        printf("\n");
 
        twt += wt[i];
 
        tat += (wt[i]+bt[i]);
    }
    float att,awt;
 
    awt = twt/n;
 
    att = tat/n;
    printf("Avg. waiting time= %f\n",awt);
    printf("Avg. turnaround time= %f",att);
}


2) a) SJF NON-PREEMPTIVE


#include<stdio.h>
int main()
{
    int bt[20], p[20], wt[20], tat[20], i, j, n, total = 0, totalT = 0, pos, temp;
    float avg_wt, avg_tat;
    printf("Enter number of process:");
    scanf("%d", &n);


    printf("\nEnter Burst Time:\n");
    for(i = 0; i < n; i++)
    {
        printf("p%d:", i + 1);
        scanf("%d", &bt[i]);
        p[i] = i + 1;
    }


    for(i = 0; i < n; i++)
    {
        pos = i;
        for(j = i + 1; j < n; j++)
        {
            if(bt[j] < bt[pos])
                pos = j;
        }


        temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;


        temp = p[i];
        p[i] = p[pos];
        p[pos] = temp;
    }


    wt[0] = 0;


    for(i = 1; i < n; i++)
    {
        wt[i] = 0;
        for(j = 0; j < i; j++)
            wt[i] += bt[j];


        total += wt[i];
    }


    avg_wt = (float)total / n;


    printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
    for(i = 0; i < n; i++)
    {
        tat[i] = bt[i] + wt[i];
        totalT += tat[i];
        printf("\np%d\t\t %d\t\t %d\t\t\t%d", p[i], bt[i], wt[i], tat[i]);
    }


    avg_tat = (float)totalT / n;
    printf("\n\nAverage Waiting Time=%f", avg_wt);
    printf("\nAverage Turnaround Time=%f", avg_tat);
}


b) SJF Preemptive


#include<stdio.h>
#define MAX 9999
struct proc
{
    int no,at,bt,rt,ct,tat,wt;
};
struct proc read(int i)
{
    struct proc p;
    printf("\nProcess No: %d\n",i);
    p.no=i;
    printf("Enter Arrival Time: ");
    scanf("%d",&p.at);
    printf("Enter Burst Time: ");
    scanf("%d",&p.bt);
    p.rt=p.bt;
    return p;
}
int main()
{
    struct proc p[10],temp;
    float avgtat=0,avgwt=0;
    int n,s,remain=0,time;
    printf("<--SRTF Scheduling Algorithm (Preemptive)-->\n");
    printf("Enter Number of Processes: ");
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        p[i]=read(i+1);
    for(int i=0;i<n-1;i++)
        for(int j=0;j<n-i-1;j++)    
            if(p[j].at>p[j+1].at)
            {
            temp=p[j];
            p[j]=p[j+1];
            p[j+1]=temp;
            }
    printf("\nProcess\t\tAT\tBT\tCT\tTAT\tWT\n");
    p[9].rt=MAX;
    for(time=0;remain!=n;time++)
    {
        s=9;
        for(int i=0;i<n;i++)
            if(p[i].at<=time&&p[i].rt<p[s].rt&&p[i].rt>0)
                s=i;
        p[s].rt--;
        if(p[s].rt==0)
        {
            remain++;
            p[s].ct=time+1;
            p[s].tat=p[s].ct-p[s].at;
            avgtat+=p[s].tat;
            p[s].wt=p[s].tat-p[s].bt;
            avgwt+=p[s].wt;
            printf("P%d\t\t%d\t%d\t%d\t%d\t%d\n",p[s].no,p[s].at,p[s].bt,p[s].ct,p[s].tat,p[s].wt);
        }
    }
    avgtat/=n,avgwt/=n;
    printf("\nAverage TurnAroundTime=%f\nAverage WaitingTime=%f",avgtat,avgwt);
}


3) Round Robin 


#include<stdio.h>
 
int main()
{
    int  n;
    printf("Enter Total Number of Processes:");
    scanf("%d", &n);
    int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n], temp_burst_time[n];
    int x = n;
 
    for(int i = 0; i < n; i++)
    {
        printf("Enter Details of Process %d \n", i + 1);
        printf("Arrival Time:  ");
        scanf("%d", &arr_time[i]);
        printf("Burst Time:   ");
        scanf("%d", &burst_time[i]);
        temp_burst_time[i] = burst_time[i];
    }
 
    int time_slot;
    printf("Enter Time Slot:");
    scanf("%d", &time_slot);
 
    int total = 0,  counter = 0,i;
    printf("Process ID       Burst Time       Turnaround Time      Waiting Time\n");
    for(total=0, i = 0; x!=0; )  
    {  
        if(temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0)    
        {  
            total = total + temp_burst_time[i];  
            temp_burst_time[i] = 0;  
            counter=1;  
        }     
        else if(temp_burst_time[i] > 0)  
        {  
            temp_burst_time[i] = temp_burst_time[i] - time_slot;  
            total  += time_slot;    
        }  
        if(temp_burst_time[i]==0 && counter==1)  
        {  
            x--; 
            printf("\nProcess No %d  \t\t %d\t\t\t\t %d\t\t\t %d", i+1, burst_time[i],
                   total-arr_time[i], total-arr_time[i]-burst_time[i]);  
            wait_time = wait_time+total-arr_time[i]-burst_time[i];  
            ta_time += total -arr_time[i];  
            counter =0;     
        }  
        if(i==n-1)  
        {  
            i=0;  
        }  
        else if(arr_time[i+1]<=total)  
        {  
            i++;  
        }  
        else  
        {  
            i=0;  
        }  
    }  
    float average_wait_time = wait_time * 1.0 / n;
    float average_turnaround_time = ta_time * 1.0 / n;
    printf("\nAverage Waiting Time:%f", average_wait_time);
    printf("\nAvg Turnaround Time:%f", average_turnaround_time);
    return 0;
}


4) Worst fit


#include<stdio.h>
#define max 25


void worstFit() {
    int frag[max], b[max], f[max], i, j, nb, nf, temp, highest = 0;
    static int bf[max], ff[max] = {0};
    printf("\nMemory Management Scheme - Worst Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &nb);
    printf("Enter the number of files:");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:\n");
    for(i = 1; i <= nb; i++) {
        printf("Block %d:", i);
        scanf("%d", &b[i]);
    }
    printf("Enter the size of the files:\n");
    for(i = 1; i <= nf; i++) {
        printf("File %d:", i);
        scanf("%d", &f[i]);
    }
    for(i = 1; i <= nf; i++) {
        for(j = 1; j <= nb; j++) {
            if(bf[j] != 1) {
                temp = b[j] - f[i];
                if(temp >= 0)
                    if(highest < temp) {
                        ff[i] = j;
                        highest = temp;
                    }
            }
        }
        frag[i] = highest;
        bf[ff[i]] = 1;
        highest = 0;
    }
    printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragment");
    for(i = 1; i <= nf; i++)
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
}


int main() {
    worstFit();
    return 0;
}


5) Best Fit


#include<stdio.h>
#define max 25


void bestFit() {
    int frag[max], b[max], f[max], i, j, nb, nf, temp, lowest = 10000;
    static int bf[max], ff[max] = {0};
    printf("\nMemory Management Scheme - Best Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &nb);
    printf("Enter the number of files:");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:\n");
    for(i = 1; i <= nb; i++) {
        printf("Block %d:", i);
        scanf("%d", &b[i]);
    }
    printf("Enter the size of the files:\n");
    for(i = 1; i <= nf; i++) {
        printf("File %d:", i);
        scanf("%d", &f[i]);
    }
    for(i = 1; i <= nf; i++) {
        for(j = 1; j <= nb; j++) {
            if(bf[j] != 1) {
                temp = b[j] - f[i];
                if(temp >= 0)
                    if(lowest > temp) {
                        ff[i] = j;
                        lowest = temp;
                    }
            }
        }
        frag[i] = lowest;
        bf[ff[i]] = 1;
        lowest = 10000;
    }
    printf("\nFile No\tFile Size \tBlock No\tBlock Size\tFragment");
    for(i = 1; i <= nf && ff[i] != 0; i++)
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
}


int main() {
    bestFit();
    return 0;
}


6) First Fit


#include<stdio.h>
#define max 25


void firstFit() {
    int frag[max], b[max], f[max], i, j, nb, nf, temp;
    static int bf[max], ff[max] = {0};
    printf("\nMemory Management Scheme - First Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &nb);
    printf("Enter the number of files:");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:\n");
    for(i = 1; i <= nb; i++) {
        printf("Block %d:", i);
        scanf("%d", &b[i]);
    }
    printf("Enter the size of the files:\n");
    for(i = 1; i <= nf; i++) {
        printf("File %d:", i);
        scanf("%d", &f[i]);
    }
    for(i = 1; i <= nf; i++) {
        for(j = 1; j <= nb; j++) {
            if(bf[j] != 1) {
                temp = b[j] - f[i];
                if(temp >= 0) {
                    ff[i] = j;
                    break;
                }
            }
        }
        frag[i] = temp;
        bf[ff[i]] = 1;
    }
    printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragment");
    for(i = 1; i <= nf; i++)
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
}


int main() {
    firstFit();
    return 0;
}


7) First In First Out Page Replacement Algorithm


#include<stdio.h>
int main()
{
int i,j,n,a[50],frame[10],no,k,avail,count=0;
printf("\nENTER THE NUMBER OF PAGES:\n");
scanf("%d",&n);
printf("\nENTER THE PAGE NUMBER :\n");
for(i=1;i<=n;i++)
scanf("%d",&a[i]);
printf("\nENTER THE NUMBER OF FRAMES :");
    scanf("%d",&no);
for(i=0;i<no;i++)
frame[i]= -1;
    j=0;
    printf("\tRef String\t Page Frames\n");
for(i=1;i<=n;i++)
{
printf("%d\t\t",a[i]);
    avail=0;
    for(k=0;k<no;k++)
if(frame[k]==a[i])
    avail=1;
    if (avail==0){
frame[j]=a[i];
        j=(j+1)%no;
        count++;
        for(k=0;k<no;k++)
        printf("%d\t",frame[k]);
}
printf("\n");
}
printf("Page Fault Is %d",count);
    return 0;
}


) 


8) Least Recently Used


#include<stdio.h>
int main ()
{
  int q[20], p[50], c = 0, c1, d, f, i, j, k = 0, n, r, t, b[20], c2[20];
  printf ("Enter no of pages:");
  scanf ("%d", &n);
  printf ("Enter the reference string:");
  for (i = 0; i < n; i++)
scanf ("%d", &p[i]);
  printf ("Enter no of frames:");
  scanf ("%d", &f);
  q[k] = p[k];
  printf ("\n\t%d\n", q[k]);
  c++;
  k++;
  for (i = 1; i < n; i++)
{
 c1 = 0;
 for (j = 0; j < f; j++)
{
 if (p[i] != q[j])
c1++;
}
 if (c1 == f)
{
 c++;
 if (k < f)
{
 q[k] = p[i];
 k++;
 for (j = 0; j < k; j++)
printf ("\t%d", q[j]);
 printf ("\n");
}
 else
{
 for (r = 0; r < f; r++)
{
 c2[r] = 0;
 for (j = i - 1; j < n; j--)
{
 if (q[r] != p[j])
c2[r]++;
 else
break;
}
}
 for (r = 0; r < f; r++)
b[r] = c2[r];
 for (r = 0; r < f; r++)
{
 for (j = r; j < f; j++)
{
 if (b[r] < b[j])
{
 t = b[r];
 b[r] = b[j];
 b[j] = t;
}
}
}
 for (r = 0; r < f; r++)
{
 if (c2[r] == b[0])
q[r] = p[i];
 printf ("\t%d", q[r]);
}
 printf ("\n");
}
}
}
  printf ("\nThe no of page faults is %d", c);
}


9) Bankers Algorithm 
#include <stdio.h>


int main() {
    int p, c, count = 0, i, j, alloc[5][3], max[5][3], need[5][3], safe[5], available[3], done[5], terminate = 0;


    printf("Enter the number of Processes and Resources: ");
    scanf("%d %d", &p, &c);


    printf("Enter allocation of resources for all processes (%d x %d matrix): \n", p, c);
    for (i = 0; i < p; i++) {
        for (j = 0; j < c; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }


    printf("Enter the maximum resource (%d x %d matrix): \n", p, c);
    for (i = 0; i < p; i++) {
        for (j = 0; j < c; j++) {
            scanf("%d", &max[i][j]);
        }
    }


    printf("Enter the available resources: \n");
    for (i = 0; i < c; i++) {
        scanf("%d", &available[i]);
    }


    printf("\nNeed resources matrix is: \n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < c; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d\t", need[i][j]);
        }
        printf("\n");
    }


    for (i = 0; i < p; i++) {
        done[i] = 0;
    }


    while (count < p) {
        for (i = 0; i < p; i++) {
            if (done[i] == 0) {
                int j;
                for (j = 0; j < c; j++) {
                    if (need[i][j] > available[j]) {
                        break;
                    }
                }
                if (j == c) {
                    safe[count] = i;
                    done[i] = 1;
                    for (j = 0; j < c; j++) {
                        available[j] += alloc[i][j];
                    }
                    count++;
                    terminate = 0;
                } else {
                    terminate++;
                }
            }
        }
        if (terminate == (p - 1)) {
            printf("Safe sequence does not exist\n");
            break;
        }
    }


    if (terminate != (p - 1)) {
        printf("\nAvailable resource after Completion:\n");
        for (i = 0; i < c; i++) {
            printf("%d\t", available[i]);
        }
        printf("\nSafe sequence is:\n");
        for (i = 0; i < p; i++) {
            printf("P%d\t", safe[i]);
        }
    }
    return 0;
}


10) Producer Consumer
#include<stdio.h>
void main(){
int buffer [10], bufsize, in, out, produce, consume, choice=0;
in = 0;
out = 0;
bufsize = 10;
while(choice !=3)
{
printf("\n 1. Produce \t2. Consume\t3. Exit");
printf("\n Enter your choice: ");
scanf("%d", &choice);
switch(choice) {
case 1: if((in+1)%bufsize==out)
printf("\n Buffer is Full");
else
{
printf("Enter the value: ");
scanf("%d", &produce);
buffer[in] = produce;
in = (in+1)%bufsize;
}
break;
case 2: if(in == out)
printf("\nBuffer is Empty");
else
{
consume = buffer [out];
printf("\nThe consumed value is %d", consume);
out = (out+1)%bufsize;
}
break;
}}}